{"version":3,"sources":["components/PokeCard.js","components/PokeList.js","components/PokeView.js","api/index.js","App.js","index.js"],"names":["PokeCard","props","pokemon","onClick","name","sprites","Tab","className","icon","src","front_default","alt","label","PokeList","fetchedPokedex","pokedex","displayList","map","i","id","Grid","item","PokeView","selectedPokemon","types","loadData","imgUrl","pokemonType","type","Card","CardMedia","image","title","CardContent","Typography","component","variant","toUpperCase","color","img","url","fetchPokemon","a","changeableUrl","axios","get","data","fetchPokedex","console","log","results","App","state","handleOnClick","bind","names","Promise","all","fetchedPokemon","this","setState","prevState","clickedData","container","spacing","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9f9713d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Tab } from '@material-ui/core';\r\nimport '../styles/pokecard.css';\r\n\r\nconst PokeCard = (props) => {\r\n\tconst { pokemon, onClick } = props;\r\n\r\n\tconst { name, sprites } = pokemon;\r\n\r\n\tif (!sprites) {\r\n\t\treturn <Tab className=\"pokecard\" label=\"...Loading Pkmn\" />;\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<Tab\r\n\t\t\t\tclassName=\"pokecard\"\r\n\t\t\t\ticon={<img src={sprites.front_default} alt=\"sprite\"></img>}\r\n\t\t\t\tlabel={name}\r\n\t\t\t\tonClick={() => onClick(pokemon)}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default PokeCard;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport PokeCard from './PokeCard';\r\n\r\nimport '../styles/pokelist.css';\r\n\r\nconst PokeList = (props) => {\r\n\tconst fetchedPokedex = props.pokedex;\r\n\r\n\tlet displayList = '';\r\n\r\n\tif (!fetchedPokedex) {\r\n\t\tdisplayList = <p>...Loading</p>;\r\n\t} else {\r\n\t\tdisplayList = fetchedPokedex.map((pokemon, i) => {\r\n\t\t\treturn <PokeCard key={i} id={i} pokemon={pokemon} onClick={props.onClick} />;\r\n\t\t});\r\n\t}\r\n\r\n\t// take the list\r\n\t// for every pokemon, display pokemon name\r\n\r\n\t// if fetchedPokedex API request not fullfilled -> show loading\r\n\t// if data has been fetched, then map thru array\r\n\treturn (\r\n\t\t<Grid item className=\"pokelist\">\r\n\t\t\t{displayList}\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nexport default PokeList;\r\n","import React from 'react';\r\nimport { Typography, Card, CardContent, CardMedia, Grid } from '@material-ui/core';\r\nimport '../styles/pokeview.css';\r\n\r\nconst PokeView = (props) => {\r\n\tconst {\r\n\t\tselectedPokemon: { id, name, sprites, types },\r\n\t} = props;\r\n\r\n\tlet loadData = '';\r\n\r\n\tif (!id) {\r\n\t\tloadData = (\r\n\t\t\t<Card>\r\n\t\t\t\t<CardMedia className=\"sprite-image\" img=\"\" title=\"none\" />\r\n\t\t\t\t<CardContent className=\"data-wrapper\">\r\n\t\t\t\t\t<Typography component=\"h2\" variant=\"h5\" className=\"data-name\">\r\n\t\t\t\t\t\tNo Pokemon Selected\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</CardContent>\r\n\t\t\t</Card>\r\n\t\t);\r\n\t} else {\r\n\t\tconst imgUrl = sprites.front_default;\r\n\t\tconst pokemonType = types.map((type) => type.type.name);\r\n\r\n\t\tloadData = (\r\n\t\t\t<Card>\r\n\t\t\t\t<CardMedia className=\"sprite-image\" image={imgUrl} title={`${name}`} />\r\n\t\t\t\t<CardContent className=\"data-wrapper\">\r\n\t\t\t\t\t<Typography component=\"h2\" variant=\"h5\" className=\"data-name\">\r\n\t\t\t\t\t\t{name.toUpperCase()}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Typography component=\"p\" variant=\"body2\" color=\"textSecondary\" className=\"data-char\">\r\n\t\t\t\t\t\t{pokemonType.map((type) => {\r\n\t\t\t\t\t\t\treturn type.toUpperCase() + ' ';\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</CardContent>\r\n\t\t\t</Card>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Grid item className=\"pokeview\">\r\n\t\t\t{loadData}\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nexport default PokeView;\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://pokeapi.co/api/v2/pokemon';\r\n\r\nexport const fetchPokemon = async (pokemon) => {\r\n\tlet changeableUrl = url;\r\n\r\n\tif (pokemon) {\r\n\t\tchangeableUrl = `${url}/${pokemon}`;\r\n\t}\r\n\r\n\ttry {\r\n\t\tconst {\r\n\t\t\tdata: { id, name, sprites, types },\r\n\t\t} = await axios.get(changeableUrl);\r\n\r\n\t\treturn {\r\n\t\t\tid,\r\n\t\t\tname,\r\n\t\t\tsprites,\r\n\t\t\ttypes,\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn error;\r\n\t}\r\n};\r\n\r\n// change to 151 during real deployment\r\nexport const fetchPokedex = async () => {\r\n\tconsole.log('Fetching Kanto Pokemon');\r\n\ttry {\r\n\t\tconst {\r\n\t\t\tdata: { results },\r\n\t\t} = await axios.get(`${url}?limit=151`);\r\n\r\n\t\t// the results returns the name and the url to the api\r\n\t\treturn results.map((pokemon) => pokemon);\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport PokeList from './components/PokeList';\r\nimport PokeView from './components/PokeView';\r\nimport './styles/app.css';\r\nimport './styles/pokeview.css';\r\n\r\nimport { fetchPokedex, fetchPokemon } from './api';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tpokedex: [],\r\n\t\t\tselectedPokemon: {},\r\n\t\t};\r\n\r\n\t\tthis.handleOnClick = this.handleOnClick.bind(this);\r\n\t}\r\n\r\n\tasync componentDidMount() {\r\n\t\tconst fetchedPokedex = await fetchPokedex();\r\n\t\tconst names = fetchedPokedex.map((pokemon) => pokemon.name);\r\n\t\tconst fetchedPokemon = await Promise.all(\r\n\t\t\tnames.map(async (pokemon) => {\r\n\t\t\t\treturn await fetchPokemon(pokemon);\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tthis.setState((prevState) => ({\r\n\t\t\t...prevState,\r\n\t\t\tpokedex: fetchedPokemon,\r\n\t\t}));\r\n\t}\r\n\r\n\thandleOnClick(clickedData) {\r\n\t\tthis.setState((prevState) => ({\r\n\t\t\t...prevState,\r\n\t\t\tselectedPokemon: clickedData,\r\n\t\t}));\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Grid container className=\"app\" spacing={1}>\r\n\t\t\t\t<PokeList pokedex={this.state.pokedex} onClick={this.handleOnClick} />\r\n\t\t\t\t<PokeView selectedPokemon={this.state.selectedPokemon} />\r\n\t\t\t</Grid>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}